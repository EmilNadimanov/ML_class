#!/usr/bin/env python3
class Tree:
    '''Create a binary tree; keyword-only arguments `data`, `left`, `right`.

  Examples:
    l1 = Tree.leaf("leaf1")
    l2 = Tree.leaf("leaf2")
    tree = Tree(data="root", left=l1, right=Tree(right=l2))
  '''

    def leaf(data):
        '''Create a leaf tree
    '''
        return Tree(data=data)

    # pretty-print trees
    def __repr__(self):
        if self.is_leaf():
            return "Leaf(%r)" % self.data
        else:
            return "Tree(%r) { left = %r, right = %r }" % (self.data, self.left, self.right)

    # all arguments after `*` are *keyword-only*!
    def __init__(self, *, data=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

    def is_leaf(self):
        '''Check if this tree is a leaf tree
    '''
        return self.left == None and self.right == None

    def children(self):
        '''List of child subtrees
    '''
        return [x for x in [self.left, self.right] if x]

    def depth(self):
        '''Compute the depth of a tree
    A leaf is depth-1, and a child is one deeper than the parent.
    '''
        return max([x.depth() for x in self.children()], default=0) + 1

if __name__ == "__main__":
    root = Tree(data="isSystems?")
    takenOtherSys = Tree(data="takenOtherSys")
    morning = Tree(data="morning?")
    likedOtherSys = Tree(data="likedOtherSys?")
    l1 = Tree.leaf(data="like")
    l2 = Tree.leaf(data="like")
    l3 = Tree.leaf(data="nah")
    l4 = Tree.leaf(data="nah")
    l5 = Tree.leaf(data="like")
    root.left = l1
    root.right = takenOtherSys
    takenOtherSys.left = morning
    takenOtherSys.right = likedOtherSys
    morning.left = l2
    morning.right = l3
    likedOtherSys.left = l4
    likedOtherSys.right = l5
    print(root)
#!/usr/bin/env python3
import pandas as pd
import numpy as np

csv_thing = """rating,easy,ai,systems,theory,morning
 2,True,True,False,True,False
 2,True,True,False,True,False
 2,False,True,False,False,False
 2,False,False,False,True,False
 2,False,True,True,False,True
 1,True,True,False,False,False
 1,True,True,False,True,False
 1,False,True,False,True,False
 0,False,False,False,False,True
 0,True,False,False,True,True
 0,False,True,False,True,False
 0,True,True,True,True,True
-1,True,True,True,False,True
-1,False,False,True,True,False
-1,False,False,True,False,True
-1,True,False,True,False,True
-2,False,False,True,True,False
-2,False,True,True,False,True
-2,True,False,True,False,False
-2,True,False,True,False,True
"""
file = open("csv_thing.csv", 'w')
file.write(csv_thing)
file.close()
res = pd.read_csv("csv_thing.csv")
res['ok'] = np.where(res['rating'] >= 0, True, False)
print(res)
res.to_csv("task2_result", index=False)

import pandas as pd
data = pd.read_csv('task2_result')
print(data)

def single_feature_score(data, goal, feature):
    truefalse = (data[goal]==data[feature])
    matches = truefalse.sum()
    total = truefalse.shape[0]
    return matches/total

for f in data.drop(columns=["rating"]).columns:
    print(f, single_feature_score(data, "ok", f))


class MyDecisionTree(Tree):

    def leaf(data):
        '''Create a leaf tree'''
        return MyDecisionTree(data=data)


    def single_feature_score(data, goal, feature):
        truefalse = (data[goal]==data[feature])
        matches = truefalse.sum()
        total = truefalse.shape[0]
        return matches/total

    #shorter alias
    def sfs(data, goal, feature):
        return MyDecisionTree.single_feature_score(data, goal, feature)

    def decision_tree_train(data, features):
        score = dict()
        guess = data['ok'].mode()[0]
        if len(data['ok'].unique()) <= 1:
            return MyDecisionTree.leaf(guess)
        elif len(features)==1:
            return MyDecisionTree.leaf(guess)
        else:
            for f in features:
                NO = data.loc[data[f] == False]
                YES = data.loc[data[f] == True]
                score[f] = MyDecisionTree.sfs(NO, f, 'ok') + MyDecisionTree.sfs(YES, f, 'ok')

        top_f = max(score, key=score.get) # gets the key with the highest value in dict
        NO =  data.loc[data[top_f] == False]
        YES = data.loc[data[top_f] == True]
        left =  MyDecisionTree.decision_tree_train(NO,  set(features) ^ {top_f})
        right = MyDecisionTree.decision_tree_train(YES, set(features) ^ {top_f})
        return MyDecisionTree(data=top_f, left=left, right=right)

    # I assume that a test case is a row of a pandas dataframe
    def decision_tree_test(self, test_point):
        if self.is_leaf():
            return self.data
        else:
            if test_point[self.data] == False:
                return self.left.decision_tree_test(test_point)
            else:
                return self.right.decision_tree_test(test_point)

if __name__ == "__main__":
    data = pd.read_csv('task2_result')
    #I drop the unnecessary 'rating' column
    data_features_only = data.drop(columns=["rating"])
    my_tree = MyDecisionTree.decision_tree_train(data_features_only, set(data_features_only.columns)^{"ok"})
    print(my_tree)
    successes = 0

    for idx in range(data_features_only.shape[0]):
        result = my_tree.decision_tree_test(data_features_only.iloc[idx])
        label = data_features_only.iloc[idx]['ok']
        print(f"""FOR TEST CASE {idx}\n result is {result} \n label is {label}\n""")
        if result == label:
            successes += 1
    print("Decision tree results in a", successes / 20, "success rate")
    print("Comparing to sinle feature score:")
    for f in data_features_only.columns:
        print(f, MyDecisionTree.sfs(data, "ok", f))
